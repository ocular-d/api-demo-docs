{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "OpenAPI",
    "description" : "This is an **example** API to demonstrate features of OpenAPI specification\n# Introduction\nThis specification is intended to to be a good starting point for describing your API in \n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\nIt also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and \n[ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond the standard OpenAPI syntax we use a few \n[vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThe goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which\nallows both humans and computers to discover and understand the capabilities of the service without access to source\ncode, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can \nunderstand and interact with the remote service with a minimal amount of implementation logic. Similar to what\ninterfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.\n",
    "termsOfService" : "https://example.com/terms/",
    "contact" : {
      "url" : "http://example.com/contact",
      "email" : "contact@example.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0",
    "x-logo" : {
      "url" : "https://apis.guru/openapi-template/logo.png"
    }
  },
  "externalDocs" : {
    "description" : "Find out how to create Github repo for your OpenAPI spec.",
    "url" : "https://github.com/Rebilly/generator-openapi-repo"
  },
  "servers" : [ {
    "url" : "https://example.com/api/v1"
  }, {
    "url" : "https://example.com/api/v1"
  } ],
  "tags" : [ {
    "name" : "Echo",
    "description" : "Example echo operations"
  }, {
    "name" : "User",
    "description" : "Operations about user"
  } ],
  "paths" : {
    "/users/{username}" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get user by user name",
        "description" : "Some description of the operation. \nYou can use `markdown` here.\n",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "pretty_print",
          "in" : "query",
          "description" : "Pretty print response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "with_email",
          "in" : "query",
          "description" : "Filter users without email",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "example" : {
                  "username" : "user1",
                  "email" : "user@example.com"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "main_auth" : [ "read:users" ]
        }, {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "pretty_print",
          "in" : "query",
          "description" : "Pretty print response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "main_auth" : [ "write:users" ]
        } ]
      }
    },
    "/echo" : {
      "post" : {
        "tags" : [ "Echo" ],
        "summary" : "Echo test",
        "description" : "Receive the exact message you've sent",
        "operationId" : "echo",
        "requestBody" : {
          "description" : "Echo payload",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "example" : "Hello world!"
              }
            },
            "application/xml" : {
              "schema" : {
                "type" : "string",
                "example" : "Hello world!"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "$ref" : "#/components/headers/ExpiresAfter"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "response" : {
                    "value" : "Hello world!"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        }, {
          "basic_auth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Email" : {
        "type" : "string",
        "description" : "User email address",
        "format" : "test",
        "example" : "john.smith@example.com"
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "minLength" : 4,
            "type" : "string",
            "description" : "User supplied username",
            "example" : "John78"
          },
          "firstName" : {
            "minLength" : 1,
            "type" : "string",
            "description" : "User first name",
            "example" : "John"
          },
          "lastName" : {
            "minLength" : 1,
            "type" : "string",
            "description" : "User last name",
            "example" : "Smith"
          },
          "email" : {
            "$ref" : "#/components/schemas/Email"
          }
        }
      }
    },
    "headers" : {
      "ExpiresAfter" : {
        "description" : "date in UTC when token expires",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "securitySchemes" : {
      "main_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://example.com/api/oauth/dialog",
            "scopes" : {
              "read:users" : "read users info",
              "write:users" : "modify or remove users"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      },
      "basic_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
